/****************************
 * Doughnut Generator Tests *
 ****************************/
const {
  cryptoWaitReady,
} = require("@polkadot/util-crypto");

const doughnutSDK = require("./");


/*********
 * Setup *
 *********/

beforeAll(async () => {
  await cryptoWaitReady();
});


/*********
 * Tests *
 *********/

describe("Verifies doughnut binaries", () => {
  it("Should verify, Sr25519 signature, 2 Domains with data", async () => {
    let doughnut = await doughnutSDK.verify(
      new Uint8Array([
        0x00, 0x00, 0x03, 0xd4, 0x35, 0x93, 0xc7, 0x15, 0xfd, 0xd3, 0x1c, 0x61,
        0x14, 0x1a, 0xbd, 0x04, 0xa9, 0x9f, 0xd6, 0x82, 0x2c, 0x85, 0x58, 0x85,
        0x4c, 0xcd, 0xe3, 0x9a, 0x56, 0x84, 0xe7, 0xa5, 0x6d, 0xa2, 0x7d, 0x1b,
        0x89, 0x41, 0x1d, 0xb6, 0x19, 0x9d, 0x3d, 0xe2, 0x0d, 0xe6, 0x0e, 0x6f,
        0x06, 0x19, 0xba, 0xe3, 0x75, 0xb1, 0xf4, 0xac, 0x93, 0x28, 0x77, 0xd1,
        0x4e, 0x0d, 0x6d, 0xec, 0x77, 0xcd, 0xca, 0xb1, 0x68, 0xde, 0x3a, 0x39,
        0x30, 0x00, 0x00, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x31, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x44, 0x6f, 0x6d,
        0x61, 0x69, 0x6e, 0x20, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x06, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
        0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x30, 0xc2, 0xd7, 0xd5, 0x7f,
        0x62, 0xf9, 0x26, 0x2e, 0xc4, 0xa6, 0xba, 0xff, 0x11, 0x28, 0x75, 0x44,
        0x61, 0x23, 0xb9, 0x52, 0xc4, 0x5d, 0xa4, 0x75, 0x30, 0xa6, 0x5b, 0xd0,
        0x09, 0xc7, 0x2b, 0x0a, 0xe4, 0x5b, 0x0e, 0xdf, 0xda, 0xd0, 0x82, 0xcd,
        0xb2, 0x71, 0xfa, 0x6f, 0xa5, 0x70, 0x88, 0xbc, 0xf0, 0x00, 0x80, 0x3d,
        0xfd, 0xdd, 0x33, 0x2c, 0xaf, 0x76, 0x2f, 0x87, 0x60, 0x55, 0x08,
      ])
    );
    expect(doughnut.holder).toEqual(new Uint8Array([
      0x1b, 0x89, 0x41, 0x1d, 0xb6, 0x19, 0x9d, 0x3d, 0xe2, 0x0d, 0xe6, 0x0e,
      0x6f, 0x06, 0x19, 0xba, 0xe3, 0x75, 0xb1, 0xf4, 0xac, 0x93, 0x28, 0x77,
      0xd1, 0x4e, 0x0d, 0x6d, 0xec, 0x77, 0xcd, 0xca,
    ]));
    expect(doughnut.issuer).toEqual(new Uint8Array([
      0xd4, 0x35, 0x93, 0xc7, 0x15, 0xfd, 0xd3, 0x1c, 0x61, 0x14, 0x1a, 0xbd,
      0x04, 0xa9, 0x9f, 0xd6, 0x82, 0x2c, 0x85, 0x58, 0x85, 0x4c, 0xcd, 0xe3,
      0x9a, 0x56, 0x84, 0xe7, 0xa5, 0x6d, 0xa2, 0x7d,
    ]));
    expect(doughnut.expiry).toEqual(987654321);
    expect(doughnut.notBefore).toEqual(12345);
    expect('Domain 1' in doughnut.permissions).toBe(true);
    expect('Domain 2' in doughnut.permissions).toBe(true);
    expect(doughnut.permissions['Domain 1']).toEqual(
      new Uint8Array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    );
    expect(doughnut.permissions['Domain 2']).toEqual(
      new Uint8Array([ 10, 11, 12, 13, 14, 15])
    );
  });

  it("Should verify, Ed25519 signature, 2 Domains with data", async () => {
    let doughnut = await doughnutSDK.verify(
      new Uint8Array([
        0x00, 0x08, 0x03, 0xe3, 0x84, 0x94, 0x29, 0xae, 0x4e, 0xfb, 0xb0, 0x93,
        0xea, 0x8a, 0xe2, 0x70, 0xeb, 0xdb, 0x57, 0xd0, 0x61, 0x2c, 0x30, 0x0e,
        0x2c, 0x5d, 0xde, 0x8c, 0xa6, 0x4d, 0x14, 0x81, 0x83, 0x3e, 0x6f, 0x1b,
        0x89, 0x41, 0x1d, 0xb6, 0x19, 0x9d, 0x3d, 0xe2, 0x0d, 0xe6, 0x0e, 0x6f,
        0x06, 0x19, 0xba, 0xe3, 0x75, 0xb1, 0xf4, 0xac, 0x93, 0x28, 0x77, 0xd1,
        0x4e, 0x0d, 0x6d, 0xec, 0x77, 0xcd, 0xca, 0xb1, 0x68, 0xde, 0x3a, 0x39,
        0x30, 0x00, 0x00, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x31, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x44, 0x6f, 0x6d,
        0x61, 0x69, 0x6e, 0x20, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x06, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
        0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x80, 0x9d, 0x7a, 0xd2, 0xe5,
        0x27, 0x79, 0x30, 0x06, 0xea, 0xaf, 0xf7, 0x56, 0xa0, 0xae, 0xb8, 0x97,
        0x1d, 0xd3, 0xc1, 0x11, 0xc7, 0x0a, 0xda, 0xae, 0x4f, 0xc2, 0x2e, 0xba,
        0x07, 0x3f, 0xb1, 0x82, 0x10, 0xed, 0xad, 0x73, 0xe4, 0x4d, 0xe6, 0xd2,
        0x35, 0x12, 0xb4, 0x8c, 0x93, 0x74, 0xab, 0xd7, 0x78, 0x6f, 0x5c, 0xbe,
        0xd5, 0x51, 0xa5, 0xe2, 0xdb, 0xe7, 0x93, 0x98, 0x39, 0xc1, 0x0b,
      ])
    );
    expect(doughnut.holder).toEqual(new Uint8Array([
      0x1b, 0x89, 0x41, 0x1d, 0xb6, 0x19, 0x9d, 0x3d, 0xe2, 0x0d, 0xe6, 0x0e,
      0x6f, 0x06, 0x19, 0xba, 0xe3, 0x75, 0xb1, 0xf4, 0xac, 0x93, 0x28, 0x77,
      0xd1, 0x4e, 0x0d, 0x6d, 0xec, 0x77, 0xcd, 0xca,
    ]));
    expect(doughnut.issuer).toEqual(new Uint8Array([
      0xe3, 0x84, 0x94, 0x29, 0xae, 0x4e, 0xfb, 0xb0, 0x93, 0xea, 0x8a, 0xe2,
      0x70, 0xeb, 0xdb, 0x57, 0xd0, 0x61, 0x2c, 0x30, 0x0e, 0x2c, 0x5d, 0xde,
      0x8c, 0xa6, 0x4d, 0x14, 0x81, 0x83, 0x3e, 0x6f,
    ]));
    expect(doughnut.expiry).toEqual(987654321);
    expect(doughnut.notBefore).toEqual(12345);
    expect('Domain 1' in doughnut.permissions).toBe(true);
    expect('Domain 2' in doughnut.permissions).toBe(true);
    expect(doughnut.permissions['Domain 1']).toEqual(
      new Uint8Array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    );
    expect(doughnut.permissions['Domain 2']).toEqual(
      new Uint8Array([ 10, 11, 12, 13, 14, 15])
    );
  });
});


